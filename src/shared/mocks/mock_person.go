// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/person.go

// Package mock_persons is a generated GoMock package.
package mock_persons

import (
	domain "api-random-user/src/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPersonUseCase is a mock of PersonUseCase interface.
type MockPersonUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPersonUseCaseMockRecorder
}

// MockPersonUseCaseMockRecorder is the mock recorder for MockPersonUseCase.
type MockPersonUseCaseMockRecorder struct {
	mock *MockPersonUseCase
}

// NewMockPersonUseCase creates a new mock instance.
func NewMockPersonUseCase(ctrl *gomock.Controller) *MockPersonUseCase {
	mock := &MockPersonUseCase{ctrl: ctrl}
	mock.recorder = &MockPersonUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonUseCase) EXPECT() *MockPersonUseCaseMockRecorder {
	return m.recorder
}

// GetPersons mocks base method.
func (m *MockPersonUseCase) GetPersons(ctx context.Context) ([]domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersons", ctx)
	ret0, _ := ret[0].([]domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersons indicates an expected call of GetPersons.
func (mr *MockPersonUseCaseMockRecorder) GetPersons(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersons", reflect.TypeOf((*MockPersonUseCase)(nil).GetPersons), ctx)
}

// MockPersonRepository is a mock of PersonRepository interface.
type MockPersonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepositoryMockRecorder
}

// MockPersonRepositoryMockRecorder is the mock recorder for MockPersonRepository.
type MockPersonRepositoryMockRecorder struct {
	mock *MockPersonRepository
}

// NewMockPersonRepository creates a new mock instance.
func NewMockPersonRepository(ctrl *gomock.Controller) *MockPersonRepository {
	mock := &MockPersonRepository{ctrl: ctrl}
	mock.recorder = &MockPersonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepository) EXPECT() *MockPersonRepositoryMockRecorder {
	return m.recorder
}

// GetPersons mocks base method.
func (m *MockPersonRepository) GetPersons(ctx context.Context) ([]domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersons", ctx)
	ret0, _ := ret[0].([]domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersons indicates an expected call of GetPersons.
func (mr *MockPersonRepositoryMockRecorder) GetPersons(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersons", reflect.TypeOf((*MockPersonRepository)(nil).GetPersons), ctx)
}
